<?php

/**
 * @file
 * Install file for the Content Moderation module.
 */

/**
 * Implements hook_install().
 */
function content_moderation_install() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'content_moderation')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function content_moderation_schema() {
  $schema['content_moderation_node_history'] = array(
    'fields' => array(
      'hid' => array(
        'description' => 'Node history entry key.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vid' => array(
        'description' => 'Node revision id. Foreign key to {node_revision}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Node id. Foreign key to {node}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'from_state' => array(
        'description' => 'The old moderation state of the node',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'state' => array(
        'description' => 'The current moderation state of the node.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The user id of the moderator who made the change. Foreign key to {users}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'stamp' => array(
        'description' => 'The timestamp of the change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'published' => array(
        'description' => 'Indicated the live revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'is_current' => array(
        'description' => 'Indicated the current revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid'),
      'vid' => array('vid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node_revision' => 'vid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function content_moderation_update_last_removed() {
  return 7300;
}

/**
 * Convert variables to config.
 */
function content_moderation_update_1000() {
  $config = config('content_moderation.settings');
  $config->set('nodedraft_disabled', update_variable_get('workbench_moderation_nodedraft_disabled', TRUE));
  $config->set('show_revision_navigation', update_variable_get('workbench_moderation_show_revision_navigation', TRUE));
  $config->save();

  // Delete content_moderation variables.
  update_variable_del('workbench_moderation_nodedraft_disabled');
  update_variable_del('workbench_moderation_show_revision_navigation');

  // Get all node types. Loop through them and delete workbench-related variables.
  $types = node_type_get_types();
  foreach ($types as $type_object) {
    $type = $type_object->type;
    if (update_variable_get("workbench_moderation_default_state_$type", NULL)) {
      config_set('node.type.' . $type, 'settings.content_moderation_default_state', update_variable_get("workbench_moderation_default_state_$type", NULL));
      update_variable_del("workbench_moderation_default_state_$type");
    }

    // Get node options that might hold a moderation flag.
    $node_options = update_variable_get("node_options_$type", array());
    foreach ($node_options as $key => $option) {
      if ($option === 'moderation') {
        config_set('node.type.' . $type, 'settings.moderation_enabled', TRUE);
        unset($node_options[$key]);
      }
    }
  }
}

/**
 * Move workbench_moderation_states configuration from table to config files.
 */
function content_moderation_update_1001() {
  if (db_table_exists('workbench_moderation_states')) {
    $states = (array) db_select('workbench_moderation_states', 'wms')
    ->fields('wms')
    ->execute()
    ->fetchAllAssoc('name');

    $config = config('content_moderation.states');
    if ($config->isNew()) {
      $config->setData($states);
      $config->save();
    }
    db_drop_table('workbench_moderation_states');
  }
}

/**
 * Move workbench_moderation_transitions configuration from table to config files.
 */
function content_moderation_update_1002() {
  if (db_table_exists('workbench_moderation_transitions')) {
    $transitions = (array) db_select('workbench_moderation_transitions', 'wmt')
    ->fields('wmt')
    ->execute()
    ->fetchAllAssoc('id');

    $config = config('content_moderation.transitions');
    if ($config->isNew()) {
      foreach($transitions as $t) {
        $machine_name = system_transliterate_machine_name(strtolower($t->name));
        $config->set($machine_name . '.name', $machine_name);
        $config->set($machine_name . '.label', $t->name);
        $config->set($machine_name . '.from_name', $t->from_name);
        $config->set($machine_name . '.to_name', $t->to_name);
      }
    }
    $config->save();
    db_drop_table('workbench_moderation_transitions');
  }
}
