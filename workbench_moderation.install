<?php

/**
 * @file
 * Install file for the Workbench Moderation module.
 */

/**
 * Implements hook_install().
 */
function workbench_moderation_install() {
  // Create tables.
  _workbench_moderation_insert_values();
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'workbench_moderation')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function workbench_moderation_schema() {
  $schema['workbench_moderation_states'] = array(
    'description' => 'Defines all possible states',
    'fields' => array(
      'name' => array(
        'description' => 'The machine name of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'A label for the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A description of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Sort weight for the moderation state.',
        'type' => 'int',
        'default' => 0,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['workbench_moderation_transitions'] = array(
    'description' => 'Defines the valid transitions for states',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => 'Primary Key: Unique workbench_moderation transition identifier.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this workbench_moderation transition.',
        'type' => 'varchar',
        'length' => 255,
        'initial' => 'from_name',
      ),
      'from_name' => array(
        'description' => 'The starting moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'to_name' => array(
        'description' => 'The ending moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['workbench_moderation_node_history'] = array(
    'fields' => array(
      'hid' => array(
        'description' => 'Node history entry key.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vid' => array(
        'description' => 'Node revision id. Foreign key to {node_revision}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Node id. Foreign key to {node}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'from_state' => array(
        'description' => 'The old moderation state of the node',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'state' => array(
        'description' => 'The current moderation state of the node.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The user id of the moderator who made the change. Foreign key to {users}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'stamp' => array(
        'description' => 'The timestamp of the change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'published' => array(
        'description' => 'Indicated the live revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'is_current' => array(
        'description' => 'Indicated the current revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid'),
      'vid' => array('vid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node_revision' => 'vid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  return $schema;
}

/**
 * Adds default data for workflow states
 */
function _workbench_moderation_insert_values() {
  // Default states.
  $states = array(
    array(
      'name' => 'draft',
      'label' => 'Draft',
      'description' => 'Work in progress',
      'weight' => -99,
    ),
    array(
      'name' => 'needs_review',
      'label' => 'Needs Review',
      'description' => 'Ready for moderation',
      'weight' => 0,
    ),
    array(
      'name' => 'published',
      'label' => 'Published',
      'description' => 'Make this version live',
      'weight' => 99,
    ),
  );

  // Save default states to the database.
  $query = db_insert('workbench_moderation_states')
    ->fields(array('name', 'label', 'description', 'weight'));

  foreach ($states as $state) {
    $query->values($state);
  }

  $query->execute();

  // Default transitions.
  $transitions = array(
    array(
      'name' => 'Submit for Review',
      'from_name' => 'draft',
      'to_name' => 'needs_review',
    ),
    array(
      'name' => 'Reject',
      'from_name' => 'needs_review',
      'to_name' => 'draft',
    ),
    array(
      'name' => 'Publish',
      'from_name' => 'needs_review',
      'to_name' => 'published',
    ),
  );

  // Save default transitions to the database.
  $query = db_insert('workbench_moderation_transitions')
    ->fields(array('name', 'from_name', 'to_name'));

  foreach ($transitions as $transition) {
    $query->values($transition);
  }

  $query->execute();
}

/**
 * Implements hook_update_last_removed().
 */
function workbench_moderation_update_last_removed() {
  return 7300;
}

// @todo
// convert workbench_moderation_default_state
// 'workbench_moderation_default_state_' . $form['#node_type']->type
// to per node.

/**
 * Convert variables to config.
 */
function workbench_moderation_update_1000() {

  // Delete workbench_moderation variables.
  update_variable_del('workbench_moderation_nodedraft_disabled');
  update_variable_del('workbench_moderation_per_node_type');
  update_variable_del('workbench_moderation_show_revision_navigation');

  // Get all node types. Loop through them and delete workbench-related variables.
  $types = node_type_get_types();
  foreach ($types as $type_object) {
    $type = $type_object->type;
    update_variable_del("workbench_moderation_default_state_$type");

    // Get node options that might hold a moderation flag.
    $node_options = variable_get("node_options_$type", array());
    foreach ($node_options as $key => $option) {
      if ($option === 'moderation') {
        unset($node_options[$key]);
      }
    }
    variable_set("node_options_$type", $node_options);
  }
}
