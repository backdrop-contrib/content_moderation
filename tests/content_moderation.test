<?php
/**
 * @file
 * Tests for content_moderation.module.
 */

 /**
  * Content moderation tests base.
  */
class ContentModerationTestCase extends BackdropWebTestCase {
  protected $content_type;
  protected $moderator_user;
  protected $admin_user;

  /**
   * @inheritdoc
   */
  public function setUp($modules = array()) {
    $modules = array_merge($modules, array(
      'content_moderation',
      'content_moderation_test',
    ));
    parent::setUp($modules);

    // Create a new content type and enable moderation on it.
    $type = $this->backdropCreateContentType();
    $this->content_type = $type->name;
    $config_node_type = config('node.type.' . $this->content_type);
    $config_node_type->set('settings.moderation_enabled', 1);
    $config_node_type->set('settings.revision_enabled', 1);
    $config_node_type->set('settings.revision_default', 1);
    $config_node_type->save();

    // Create and login user.
    $this->moderator_user = $this->backdropCreateUser(array(
      'access content',
      'view revisions',
      'view all unpublished content',
      'view moderation history',
      'view moderation messages',
      'bypass content moderation',
      "create {$this->content_type} content",
      "edit any {$this->content_type} content",
    ));
    $this->admin_user = $this->backdropCreateUser(array(
      'bypass node access',
      'administer nodes',
      'view revisions',
      'view all unpublished content',
      'view moderation history',
      'view moderation messages',
      'bypass content moderation',
      "create {$this->content_type} content",
    ));

    return TRUE;
  }

  /**
   * Override BackdropWebTestCase::backdropGetToken() as it does not return the
   * correct token for the currently logged-in testing user.
   */
  protected function backdropGetToken($value = '') {
    $session_id = $this->session_id;
    if (empty($session_id) && !empty($this->loggedInUser)) {
      $session_id = db_query("SELECT sid FROM {sessions} WHERE uid = :uid ORDER BY timestamp DESC", array(':uid' => $this->loggedInUser->uid))->fetchField();
    }
    return backdrop_hmac_base64($value, $session_id . backdrop_get_private_key() . backdrop_get_hash_salt());
  }
}
